// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/api.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "item-archived/api/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ArchiveServiceName is the fully-qualified name of the ArchiveService service.
	ArchiveServiceName = "v1.ArchiveService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ArchiveServiceReadProcedure is the fully-qualified name of the ArchiveService's Read RPC.
	ArchiveServiceReadProcedure = "/v1.ArchiveService/Read"
	// ArchiveServiceCreateProcedure is the fully-qualified name of the ArchiveService's Create RPC.
	ArchiveServiceCreateProcedure = "/v1.ArchiveService/Create"
	// ArchiveServiceMoveProcedure is the fully-qualified name of the ArchiveService's Move RPC.
	ArchiveServiceMoveProcedure = "/v1.ArchiveService/Move"
	// ArchiveServiceDeleteProcedure is the fully-qualified name of the ArchiveService's Delete RPC.
	ArchiveServiceDeleteProcedure = "/v1.ArchiveService/Delete"
	// ArchiveServiceSearchProcedure is the fully-qualified name of the ArchiveService's Search RPC.
	ArchiveServiceSearchProcedure = "/v1.ArchiveService/Search"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	archiveServiceServiceDescriptor      = v1.File_v1_api_proto.Services().ByName("ArchiveService")
	archiveServiceReadMethodDescriptor   = archiveServiceServiceDescriptor.Methods().ByName("Read")
	archiveServiceCreateMethodDescriptor = archiveServiceServiceDescriptor.Methods().ByName("Create")
	archiveServiceMoveMethodDescriptor   = archiveServiceServiceDescriptor.Methods().ByName("Move")
	archiveServiceDeleteMethodDescriptor = archiveServiceServiceDescriptor.Methods().ByName("Delete")
	archiveServiceSearchMethodDescriptor = archiveServiceServiceDescriptor.Methods().ByName("Search")
)

// ArchiveServiceClient is a client for the v1.ArchiveService service.
type ArchiveServiceClient interface {
	Read(context.Context, *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error)
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Move(context.Context, *connect.Request[v1.MoveRequest]) (*connect.Response[v1.MoveResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error)
}

// NewArchiveServiceClient constructs a client for the v1.ArchiveService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewArchiveServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ArchiveServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &archiveServiceClient{
		read: connect.NewClient[v1.ReadRequest, v1.ReadResponse](
			httpClient,
			baseURL+ArchiveServiceReadProcedure,
			connect.WithSchema(archiveServiceReadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		create: connect.NewClient[v1.CreateRequest, v1.CreateResponse](
			httpClient,
			baseURL+ArchiveServiceCreateProcedure,
			connect.WithSchema(archiveServiceCreateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		move: connect.NewClient[v1.MoveRequest, v1.MoveResponse](
			httpClient,
			baseURL+ArchiveServiceMoveProcedure,
			connect.WithSchema(archiveServiceMoveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		delete: connect.NewClient[v1.DeleteRequest, v1.DeleteResponse](
			httpClient,
			baseURL+ArchiveServiceDeleteProcedure,
			connect.WithSchema(archiveServiceDeleteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		search: connect.NewClient[v1.SearchRequest, v1.SearchResponse](
			httpClient,
			baseURL+ArchiveServiceSearchProcedure,
			connect.WithSchema(archiveServiceSearchMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// archiveServiceClient implements ArchiveServiceClient.
type archiveServiceClient struct {
	read   *connect.Client[v1.ReadRequest, v1.ReadResponse]
	create *connect.Client[v1.CreateRequest, v1.CreateResponse]
	move   *connect.Client[v1.MoveRequest, v1.MoveResponse]
	delete *connect.Client[v1.DeleteRequest, v1.DeleteResponse]
	search *connect.Client[v1.SearchRequest, v1.SearchResponse]
}

// Read calls v1.ArchiveService.Read.
func (c *archiveServiceClient) Read(ctx context.Context, req *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error) {
	return c.read.CallUnary(ctx, req)
}

// Create calls v1.ArchiveService.Create.
func (c *archiveServiceClient) Create(ctx context.Context, req *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return c.create.CallUnary(ctx, req)
}

// Move calls v1.ArchiveService.Move.
func (c *archiveServiceClient) Move(ctx context.Context, req *connect.Request[v1.MoveRequest]) (*connect.Response[v1.MoveResponse], error) {
	return c.move.CallUnary(ctx, req)
}

// Delete calls v1.ArchiveService.Delete.
func (c *archiveServiceClient) Delete(ctx context.Context, req *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return c.delete.CallUnary(ctx, req)
}

// Search calls v1.ArchiveService.Search.
func (c *archiveServiceClient) Search(ctx context.Context, req *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error) {
	return c.search.CallUnary(ctx, req)
}

// ArchiveServiceHandler is an implementation of the v1.ArchiveService service.
type ArchiveServiceHandler interface {
	Read(context.Context, *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error)
	Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error)
	Move(context.Context, *connect.Request[v1.MoveRequest]) (*connect.Response[v1.MoveResponse], error)
	Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error)
	Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error)
}

// NewArchiveServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewArchiveServiceHandler(svc ArchiveServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	archiveServiceReadHandler := connect.NewUnaryHandler(
		ArchiveServiceReadProcedure,
		svc.Read,
		connect.WithSchema(archiveServiceReadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	archiveServiceCreateHandler := connect.NewUnaryHandler(
		ArchiveServiceCreateProcedure,
		svc.Create,
		connect.WithSchema(archiveServiceCreateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	archiveServiceMoveHandler := connect.NewUnaryHandler(
		ArchiveServiceMoveProcedure,
		svc.Move,
		connect.WithSchema(archiveServiceMoveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	archiveServiceDeleteHandler := connect.NewUnaryHandler(
		ArchiveServiceDeleteProcedure,
		svc.Delete,
		connect.WithSchema(archiveServiceDeleteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	archiveServiceSearchHandler := connect.NewUnaryHandler(
		ArchiveServiceSearchProcedure,
		svc.Search,
		connect.WithSchema(archiveServiceSearchMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/v1.ArchiveService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ArchiveServiceReadProcedure:
			archiveServiceReadHandler.ServeHTTP(w, r)
		case ArchiveServiceCreateProcedure:
			archiveServiceCreateHandler.ServeHTTP(w, r)
		case ArchiveServiceMoveProcedure:
			archiveServiceMoveHandler.ServeHTTP(w, r)
		case ArchiveServiceDeleteProcedure:
			archiveServiceDeleteHandler.ServeHTTP(w, r)
		case ArchiveServiceSearchProcedure:
			archiveServiceSearchHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedArchiveServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedArchiveServiceHandler struct{}

func (UnimplementedArchiveServiceHandler) Read(context.Context, *connect.Request[v1.ReadRequest]) (*connect.Response[v1.ReadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.ArchiveService.Read is not implemented"))
}

func (UnimplementedArchiveServiceHandler) Create(context.Context, *connect.Request[v1.CreateRequest]) (*connect.Response[v1.CreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.ArchiveService.Create is not implemented"))
}

func (UnimplementedArchiveServiceHandler) Move(context.Context, *connect.Request[v1.MoveRequest]) (*connect.Response[v1.MoveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.ArchiveService.Move is not implemented"))
}

func (UnimplementedArchiveServiceHandler) Delete(context.Context, *connect.Request[v1.DeleteRequest]) (*connect.Response[v1.DeleteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.ArchiveService.Delete is not implemented"))
}

func (UnimplementedArchiveServiceHandler) Search(context.Context, *connect.Request[v1.SearchRequest]) (*connect.Response[v1.SearchResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("v1.ArchiveService.Search is not implemented"))
}
