// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file v1/api.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum v1.ImageFormat
 */
export enum ImageFormat {
  /**
   * @generated from enum value: JPG = 0;
   */
  JPG = 0,

  /**
   * @generated from enum value: PNG = 1;
   */
  PNG = 1,

  /**
   * @generated from enum value: GIF = 2;
   */
  GIF = 2,

  /**
   * @generated from enum value: SVG = 3;
   */
  SVG = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ImageFormat)
proto3.util.setEnumType(ImageFormat, "v1.ImageFormat", [
  { no: 0, name: "JPG" },
  { no: 1, name: "PNG" },
  { no: 2, name: "GIF" },
  { no: 3, name: "SVG" },
]);

/**
 * EntryMetadata describes the metadata present in both items and containers
 *
 * @generated from message v1.EntryMetadata
 */
export class EntryMetadata extends Message<EntryMetadata> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: repeated string tags = 2;
   */
  tags: string[] = [];

  /**
   * @generated from field: optional string description = 3;
   */
  description?: string;

  /**
   * @generated from field: optional bytes image = 4;
   */
  image?: Uint8Array;

  /**
   * @generated from field: optional v1.ImageFormat image_format = 5;
   */
  imageFormat?: ImageFormat;

  constructor(data?: PartialMessage<EntryMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.EntryMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "image", kind: "scalar", T: 12 /* ScalarType.BYTES */, opt: true },
    { no: 5, name: "image_format", kind: "enum", T: proto3.getEnumType(ImageFormat), opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EntryMetadata {
    return new EntryMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EntryMetadata {
    return new EntryMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EntryMetadata {
    return new EntryMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: EntryMetadata | PlainMessage<EntryMetadata> | undefined, b: EntryMetadata | PlainMessage<EntryMetadata> | undefined): boolean {
    return proto3.util.equals(EntryMetadata, a, b);
  }
}

/**
 * Read
 *
 * @generated from message v1.ReadRequest
 */
export class ReadRequest extends Message<ReadRequest> {
  /**
   * path should be an array of strings in the following format:
   *
   * [id.tag_1.tag_2.container, id_2.tag_3.container, id_3.item]
   *
   * both the tags and the entry type should be added to the path segment separated by dots
   *
   * @generated from field: repeated string path = 1;
   */
  path: string[] = [];

  constructor(data?: PartialMessage<ReadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ReadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadRequest {
    return new ReadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadRequest {
    return new ReadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadRequest {
    return new ReadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReadRequest | PlainMessage<ReadRequest> | undefined, b: ReadRequest | PlainMessage<ReadRequest> | undefined): boolean {
    return proto3.util.equals(ReadRequest, a, b);
  }
}

/**
 * @generated from message v1.ReadResponse
 */
export class ReadResponse extends Message<ReadResponse> {
  /**
   * @generated from field: v1.EntryMetadata metadata = 1;
   */
  metadata?: EntryMetadata;

  /**
   * children will be defined if the entry is a container, otherwise it will be null
   *
   * @generated from field: optional v1.ReadResponse.Children children = 2;
   */
  children?: ReadResponse_Children;

  constructor(data?: PartialMessage<ReadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ReadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: EntryMetadata },
    { no: 2, name: "children", kind: "message", T: ReadResponse_Children, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadResponse {
    return new ReadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadResponse {
    return new ReadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadResponse {
    return new ReadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReadResponse | PlainMessage<ReadResponse> | undefined, b: ReadResponse | PlainMessage<ReadResponse> | undefined): boolean {
    return proto3.util.equals(ReadResponse, a, b);
  }
}

/**
 * @generated from message v1.ReadResponse.Children
 */
export class ReadResponse_Children extends Message<ReadResponse_Children> {
  /**
   * note: this is a filename formatted as "id.tag_1.tag_2", the .item ext should be appended as necessary
   *
   * @generated from field: repeated string item_names = 1;
   */
  itemNames: string[] = [];

  /**
   * note: this is a filename formatted as "id.tag_1.tag_2", the .container ext should be appended as necessary
   *
   * @generated from field: repeated string container_names = 2;
   */
  containerNames: string[] = [];

  constructor(data?: PartialMessage<ReadResponse_Children>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.ReadResponse.Children";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "item_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "container_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadResponse_Children {
    return new ReadResponse_Children().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadResponse_Children {
    return new ReadResponse_Children().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadResponse_Children {
    return new ReadResponse_Children().fromJsonString(jsonString, options);
  }

  static equals(a: ReadResponse_Children | PlainMessage<ReadResponse_Children> | undefined, b: ReadResponse_Children | PlainMessage<ReadResponse_Children> | undefined): boolean {
    return proto3.util.equals(ReadResponse_Children, a, b);
  }
}

/**
 * Create creates a container or item
 *
 * @generated from message v1.CreateRequest
 */
export class CreateRequest extends Message<CreateRequest> {
  /**
   * @generated from field: v1.EntryMetadata metadata = 1;
   */
  metadata?: EntryMetadata;

  /**
   * this should follow the same convention as the path in ReadRequest
   *
   * @generated from field: repeated string path = 2;
   */
  path: string[] = [];

  /**
   * create_container will create a container instead of an item if true
   *
   * @generated from field: bool create_container = 3;
   */
  createContainer = false;

  constructor(data?: PartialMessage<CreateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.CreateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: EntryMetadata },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "create_container", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRequest {
    return new CreateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRequest {
    return new CreateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRequest {
    return new CreateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRequest | PlainMessage<CreateRequest> | undefined, b: CreateRequest | PlainMessage<CreateRequest> | undefined): boolean {
    return proto3.util.equals(CreateRequest, a, b);
  }
}

/**
 * @generated from message v1.CreateResponse
 */
export class CreateResponse extends Message<CreateResponse> {
  constructor(data?: PartialMessage<CreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.CreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateResponse {
    return new CreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateResponse {
    return new CreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateResponse {
    return new CreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateResponse | PlainMessage<CreateResponse> | undefined, b: CreateResponse | PlainMessage<CreateResponse> | undefined): boolean {
    return proto3.util.equals(CreateResponse, a, b);
  }
}

/**
 * Move can move a container or an item
 *
 * @generated from message v1.MoveRequest
 */
export class MoveRequest extends Message<MoveRequest> {
  /**
   * this should follow the same convention as the path in ReadRequest
   *
   * @generated from field: repeated string src = 1;
   */
  src: string[] = [];

  /**
   * this should follow the same convention as the path in ReadRequest
   *
   * @generated from field: repeated string dest = 2;
   */
  dest: string[] = [];

  constructor(data?: PartialMessage<MoveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.MoveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "src", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "dest", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MoveRequest {
    return new MoveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MoveRequest {
    return new MoveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MoveRequest {
    return new MoveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MoveRequest | PlainMessage<MoveRequest> | undefined, b: MoveRequest | PlainMessage<MoveRequest> | undefined): boolean {
    return proto3.util.equals(MoveRequest, a, b);
  }
}

/**
 * @generated from message v1.MoveResponse
 */
export class MoveResponse extends Message<MoveResponse> {
  constructor(data?: PartialMessage<MoveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.MoveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MoveResponse {
    return new MoveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MoveResponse {
    return new MoveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MoveResponse {
    return new MoveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MoveResponse | PlainMessage<MoveResponse> | undefined, b: MoveResponse | PlainMessage<MoveResponse> | undefined): boolean {
    return proto3.util.equals(MoveResponse, a, b);
  }
}

/**
 * Delete can delete a container or an item
 *
 * @generated from message v1.DeleteRequest
 */
export class DeleteRequest extends Message<DeleteRequest> {
  /**
   * this should follow the same convention as the path in ReadRequest
   *
   * @generated from field: repeated string path = 1;
   */
  path: string[] = [];

  constructor(data?: PartialMessage<DeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.DeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRequest {
    return new DeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRequest {
    return new DeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRequest {
    return new DeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRequest | PlainMessage<DeleteRequest> | undefined, b: DeleteRequest | PlainMessage<DeleteRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRequest, a, b);
  }
}

/**
 * @generated from message v1.DeleteResponse
 */
export class DeleteResponse extends Message<DeleteResponse> {
  constructor(data?: PartialMessage<DeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.DeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteResponse {
    return new DeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteResponse {
    return new DeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteResponse {
    return new DeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteResponse | PlainMessage<DeleteResponse> | undefined, b: DeleteResponse | PlainMessage<DeleteResponse> | undefined): boolean {
    return proto3.util.equals(DeleteResponse, a, b);
  }
}

/**
 * Search
 *
 * @generated from message v1.SearchRequest
 */
export class SearchRequest extends Message<SearchRequest> {
  /**
   * @generated from field: string query = 1;
   */
  query = "";

  constructor(data?: PartialMessage<SearchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.SearchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchRequest {
    return new SearchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchRequest {
    return new SearchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchRequest {
    return new SearchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchRequest | PlainMessage<SearchRequest> | undefined, b: SearchRequest | PlainMessage<SearchRequest> | undefined): boolean {
    return proto3.util.equals(SearchRequest, a, b);
  }
}

/**
 * @generated from message v1.SearchResponse
 */
export class SearchResponse extends Message<SearchResponse> {
  /**
   * @generated from field: repeated v1.SearchResponse.Entry entries = 1;
   */
  entries: SearchResponse_Entry[] = [];

  constructor(data?: PartialMessage<SearchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.SearchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: SearchResponse_Entry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchResponse {
    return new SearchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchResponse {
    return new SearchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchResponse {
    return new SearchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchResponse | PlainMessage<SearchResponse> | undefined, b: SearchResponse | PlainMessage<SearchResponse> | undefined): boolean {
    return proto3.util.equals(SearchResponse, a, b);
  }
}

/**
 * @generated from message v1.SearchResponse.Entry
 */
export class SearchResponse_Entry extends Message<SearchResponse_Entry> {
  /**
   * @generated from field: repeated string path = 1;
   */
  path: string[] = [];

  /**
   * @generated from field: v1.EntryMetadata meta = 2;
   */
  meta?: EntryMetadata;

  constructor(data?: PartialMessage<SearchResponse_Entry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.SearchResponse.Entry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "meta", kind: "message", T: EntryMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchResponse_Entry {
    return new SearchResponse_Entry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchResponse_Entry {
    return new SearchResponse_Entry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchResponse_Entry {
    return new SearchResponse_Entry().fromJsonString(jsonString, options);
  }

  static equals(a: SearchResponse_Entry | PlainMessage<SearchResponse_Entry> | undefined, b: SearchResponse_Entry | PlainMessage<SearchResponse_Entry> | undefined): boolean {
    return proto3.util.equals(SearchResponse_Entry, a, b);
  }
}

